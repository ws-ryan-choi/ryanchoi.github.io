"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricsServer = void 0;
const debug_1 = __importDefault(require("@tryghost/debug"));
const express_1 = __importDefault(require("express"));
const stoppable_1 = __importDefault(require("stoppable"));
const debug = (0, debug_1.default)('metrics-server');
class MetricsServer {
    serverConfig;
    handler;
    app;
    httpServer;
    isShuttingDown;
    constructor({ serverConfig, handler }) {
        // initialize local variables
        this.serverConfig = serverConfig;
        this.handler = handler;
        this.app = null;
        this.httpServer = null;
        this.isShuttingDown = false;
    }
    async start() {
        // start the server
        debug('Starting metrics server');
        this.app = (0, express_1.default)();
        this.app.get('/metrics', this.handler);
        const httpServer = this.app.listen(this.serverConfig.port, this.serverConfig.host, () => {
            debug(`Metrics server listening at ${this.serverConfig.host}:${this.serverConfig.port}`);
        });
        this.httpServer = (0, stoppable_1.default)(httpServer, 0);
        process.on('SIGINT', () => this.shutdown());
        process.on('SIGTERM', () => this.shutdown());
        return { app: this.app, httpServer: this.httpServer };
    }
    async stop() {
        // stop the server
        debug('Stopping metrics server');
        if (this.httpServer && this.httpServer.listening) {
            await this.httpServer.stop();
        }
    }
    async shutdown() {
        if (this.isShuttingDown) {
            return;
        }
        this.isShuttingDown = true;
        await this.stop();
        this.isShuttingDown = false;
    }
}
exports.MetricsServer = MetricsServer;
//# sourceMappingURL=MetricsServer.js.map